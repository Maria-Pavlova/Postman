{
	"info": {
		"_postman_id": "c8315be9-60d1-48fe-ad1c-84c50fccd789",
		"name": "GitHubDemo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Get Issue12 from Nakov",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/testnakov/test-nakov-repo/issues/12\n",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"testnakov",
								"test-nakov-repo",
								"issues",
								"12\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status\", function(){\r",
									"    pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Check status code ES6\", ( ) => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//pm.test(\"Check body length\", function(){\r",
									"  //  var body = pm.response.json();\r",
									"  //  pm.expect(body.length, \"Body length property\").to.equal(4);\r",
									"//})\r",
									"\r",
									"pm.test(\"HTTP returns an array of objects with ids\", function(){\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(Array.isArray(json)).equals(true);\r",
									"    for(let item of json){\r",
									"     pm.expect(typeof(item)).equals(\"object\");\r",
									"     pm.expect(typeof(item.id)).equals(\"number\");   \r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let body = pm.response.json();\r",
									"console.log(body);\r",
									"\r",
									"pm.test(\"Check status code\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status\", function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check issue URL\", function(){\r",
									"       // console.log(body.url);\r",
									"    pm.expect(body.url, \"URL property\").to.equal(\"https://api.github.com/repos/Maria-Pavlova/Postman/issues/5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check issue Number\", function(){\r",
									"     pm.expect(body.number, \"Number property\").to.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Check issue ID\", function(){\r",
									"      pm.expect(body.id, \"ID property\").to.equal(1237016150);\r",
									"});\r",
									"\r",
									"pm.test(\"Check labels URL\", function(){\r",
									"      pm.expect(body.labels_url).to.equal(\"https://api.github.com/repos/Maria-Pavlova/Postman/issues/5/labels{/name}\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/5",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Create new isuue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let body = pm.response.json();\r",
									"console.log(body);\r",
									"\r",
									"pm.test(\"Check status code\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status\", function(){\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check repository URL\", function(){\r",
									"    pm.expect(body.repository_url).to.equals(\"https://api.github.com/repos/Maria-Pavlova/Postman\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Maria-Pavlova",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"title\" : \"GitHubIssue from Postman\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Issue with labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let body = pm.response.json();\r",
									"console.log(body);\r",
									"\r",
									"pm.test(\"Check status code\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status\", function(){\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check repository URL\", function(){\r",
									"    pm.expect(body.repository_url).to.equals(\"https://api.github.com/repos/Maria-Pavlova/Postman\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check title\", function(){\r",
									"    pm.expect(body.title).to.equals(\"GitHub Issue with labels\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check label name\", function(){\r",
									"  //  console.log(body.labels[0]);\r",
									"   pm.expect(body.labels[0].name).to.include(\"bug\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Maria-Pavlova",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"GitHub Issue with labels\",\r\n    \"labels\": [\r\n        \"bug\",\r\n        \"UI\",\r\n        \"user\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"{{user}}",
								"{{repo}}",
								"issues"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}